#!/bin/python
# Original code located at github.com/erget/StereoVision
# Modifications for a 3-headed collinear stereocam done by Sarah Dlouhy [smdwdk@mst.edu]
# Code originally licensed under the GNU General Public Use License.

"""
Tool for creating and exporting colored point clouds from stereo image pairs.
"""

import argparse

import cv2
from tricam.blockmatchers import StereoBM, StereoSGBM
from tricam.calibration import StereoCalibration
from tricam.stereo_cameras import CalibratedGroup
from tricam.ui_utils import STEREO_BM_FLAG


def main():
    """Produce PLY point clouds from stereo image pair."""
    parser = argparse.ArgumentParser(description="Read images taken with "
                                     "stereo pair and use them to produce 3D "
                                     "point clouds that can be viewed with "
                                     "MeshLab.", parents=[STEREO_BM_FLAG])
    parser.add_argument("calibration", help="Path to calibration folder.")
    parser.add_argument("left", help="Path to left image")
    parser.add_argument("center", help="Path to center image")
    parser.add_argument("right", help="Path to right image")
    parser.add_argument("output", help="Path to output file.")
    parser.add_argument("--bm_settings",
                        help="Path to block matcher's settings.")
    args = parser.parse_args()

    image_group = [cv2.imread(image) for image in [args.left, args.center, args.right]]
    calib_folder = args.calibration
    if args.use_stereobm:
        block_matcher = StereoBM()
    else:
        block_matcher = StereoSGBM()
    if args.bm_settings:
        block_matcher.load_settings(args.bm_settings)

    camera_group = CalibratedGroup(None,
                                   StereoCalibration(input_folder=calib_folder),
                                   block_matcher)
    rectified_group = camera_group.calibration.rectify(image_group)
    points = camera_group.get_point_cloud(rectified_group)
    points = points.filter_infinity()
    points.write_ply(args.output)


if __name__ == "__main__":
    main()
